{"version":3,"sources":["components/Nav.js","components/Weather.js","components/Message.js","App.js","index.js","icons/map.svg"],"names":["Nav","props","useState","city","setCity","onSubmit","e","preventDefault","search","autoFocus","defaultValue","type","placeholder","onChange","target","value","disabled","Weather","weather","className","name","sys","country","main","temp","feels_like","description","src","icon","alt","width","height","viewBox","d","temp_max","fill","temp_min","humidity","Message","map","App","useEffect","getWeatherByLocation","setWeather","API_URL","API_KEY","getPos","pos","a","lat","coords","latitude","lon","longitude","url","fetch","response","json","data","navigator","geolocation","getCurrentPosition","err","Swal","fire","text","toast","position","timer","showConfirmButton","status","console","log","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.d5f27a56.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nfunction Nav(props) {\r\n    const [city, setCity] = useState(\"\");\r\n\r\n    const search = e => {\r\n        e.preventDefault();\r\n        props.search(city);\r\n    };\r\n\r\n    return (\r\n        <nav>\r\n            <form onSubmit={search}>\r\n                <input\r\n                    autoFocus\r\n                    defaultValue={city}\r\n                    type=\"text\"\r\n                    placeholder=\"¿En dónde te encuentras?\"\r\n                    onChange={e => setCity(e.target.value)}\r\n                />\r\n\r\n                <button disabled={city ? false : true} type=\"submit\">\r\n                    Buscar\r\n                </button>\r\n            </form>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Nav;\r\n","import React from \"react\";\r\n\r\nfunction Weather({ weather }) {\r\n    return (\r\n        <>\r\n            <div className=\"row\">\r\n                <div className=\"location\">\r\n                    <div className=\"city\">{weather.name}</div>\r\n                    <div className=\"country\">{weather.sys.country}</div>\r\n                </div>\r\n                <div className=\"climate\">\r\n                    <div className=\"temp\">\r\n                        <p>{weather.main.temp}</p>\r\n                        <span>°C</span>\r\n                    </div>\r\n                    <div className=\"feelsLike\">\r\n                        Sensación térmica: {weather.main.feels_like}°C\r\n                    </div>\r\n                    <div className=\"weather\">\r\n                        {weather.weather[0].description}\r\n                        <img\r\n                            src={`https://openweathermap.org/img/w/${weather.weather[0].icon}.png`}\r\n                            alt={weather.weather[0].description}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"flex\">\r\n                <p>\r\n                    <svg width=\"15\" height=\"21\" viewBox=\"0 0 15 21\">\r\n                        <path d=\"M6.1875 13.37V4.8125C6.1875 4.58044 6.09531 4.35788 5.93122 4.19378C5.76713 4.02969 5.54457 3.9375 5.3125 3.9375C5.08044 3.9375 4.85788 4.02969 4.69378 4.19378C4.52969 4.35788 4.4375 4.58044 4.4375 4.8125V13.37C4.17301 13.5227 3.95309 13.742 3.79958 14.006C3.64608 14.27 3.56435 14.5696 3.5625 14.875C3.5625 15.3391 3.74688 15.7842 4.07507 16.1124C4.40325 16.4406 4.84837 16.625 5.3125 16.625C5.77663 16.625 6.22175 16.4406 6.54994 16.1124C6.87813 15.7842 7.0625 15.3391 7.0625 14.875C7.06066 14.5696 6.97892 14.27 6.82542 14.006C6.67192 13.742 6.45199 13.5227 6.1875 13.37ZM14.0625 2.1875H13.625V1.75C13.625 1.51794 13.5328 1.29538 13.3687 1.13128C13.2046 0.967187 12.9821 0.875 12.75 0.875C12.5179 0.875 12.2954 0.967187 12.1313 1.13128C11.9672 1.29538 11.875 1.51794 11.875 1.75V2.1875H11.4375C11.2054 2.1875 10.9829 2.27969 10.8188 2.44378C10.6547 2.60788 10.5625 2.83044 10.5625 3.0625C10.5625 3.29456 10.6547 3.51712 10.8188 3.68122C10.9829 3.84531 11.2054 3.9375 11.4375 3.9375H11.875V4.375C11.875 4.60706 11.9672 4.82962 12.1313 4.99372C12.2954 5.15781 12.5179 5.25 12.75 5.25C12.9821 5.25 13.2046 5.15781 13.3687 4.99372C13.5328 4.82962 13.625 4.60706 13.625 4.375V3.9375H14.0625C14.2946 3.9375 14.5171 3.84531 14.6812 3.68122C14.8453 3.51712 14.9375 3.29456 14.9375 3.0625C14.9375 2.83044 14.8453 2.60788 14.6812 2.44378C14.5171 2.27969 14.2946 2.1875 14.0625 2.1875ZM9.25 4.8125C9.25 3.76821 8.83516 2.76669 8.09674 2.02827C7.35831 1.28984 6.35679 0.875 5.3125 0.875C4.26821 0.875 3.26669 1.28984 2.52827 2.02827C1.78984 2.76669 1.375 3.76821 1.375 4.8125V11.375C0.770239 12.0603 0.354863 12.8916 0.169962 13.7867C-0.0149392 14.6818 0.0370412 15.6097 0.320761 16.4785C0.604482 17.3473 1.11011 18.127 1.78763 18.7405C2.46516 19.354 3.2911 19.7799 4.18375 19.9762C4.5517 20.0602 4.92663 20.11 5.30375 20.125C6.32004 20.1314 7.31636 19.8427 8.17177 19.294C9.02719 18.7452 9.70494 17.9599 10.1228 17.0335C10.5406 16.107 10.6805 15.0792 10.5256 14.0748C10.3707 13.0704 9.92756 12.1325 9.25 11.375V4.8125ZM7.5 17.5963C7.03914 17.971 6.4905 18.2222 5.90573 18.3264C5.32096 18.4305 4.71931 18.3841 4.15742 18.1916C3.59552 17.999 3.09188 17.6666 2.69389 17.2257C2.29591 16.7848 2.01668 16.2499 1.8825 15.6712C1.74732 15.0864 1.76485 14.4765 1.93341 13.9004C2.10197 13.3242 2.41589 12.8011 2.845 12.3812C2.92768 12.3002 2.99345 12.2036 3.03851 12.0969C3.08357 11.9903 3.10702 11.8758 3.1075 11.76V4.8125C3.1075 4.23234 3.33797 3.67594 3.74821 3.2657C4.15844 2.85547 4.71484 2.625 5.295 2.625C5.87516 2.625 6.43156 2.85547 6.8418 3.2657C7.25203 3.67594 7.4825 4.23234 7.4825 4.8125V11.76C7.48298 11.8758 7.50643 11.9903 7.55149 12.0969C7.59655 12.2036 7.66232 12.3002 7.745 12.3812C8.10266 12.7268 8.38258 13.1445 8.56612 13.6067C8.74966 14.0689 8.8326 14.5649 8.80942 15.0616C8.78624 15.5584 8.65747 16.0445 8.43168 16.4876C8.2059 16.9307 7.88828 17.3205 7.5 17.6313V17.5963Z\" />\r\n                    </svg>\r\n                    <span>Máx:</span>\r\n                    {weather.main.temp_max}°C\r\n                </p>\r\n                <p>\r\n                    <svg width=\"15\" height=\"21\" viewBox=\"0 0 15 21\" fill=\"none\">\r\n                        <path d=\"M9.25 4.8125C9.25 3.76821 8.83516 2.76669 8.09673 2.02827C7.35831 1.28984 6.35679 0.875 5.3125 0.875C4.26821 0.875 3.26669 1.28984 2.52827 2.02827C1.78984 2.76669 1.375 3.76821 1.375 4.8125V11.375C0.770239 12.0603 0.354863 12.8916 0.169962 13.7867C-0.0149392 14.6818 0.0370412 15.6097 0.320761 16.4785C0.604482 17.3473 1.11011 18.127 1.78763 18.7405C2.46516 19.354 3.2911 19.7799 4.18375 19.9762C4.5517 20.0602 4.92663 20.11 5.30375 20.125C6.32004 20.1314 7.31636 19.8427 8.17177 19.294C9.02719 18.7452 9.70494 17.9599 10.1228 17.0335C10.5406 16.107 10.6805 15.0792 10.5256 14.0748C10.3707 13.0704 9.92756 12.1325 9.25 11.375V4.8125ZM7.5 17.5963C6.80381 18.2135 5.89091 18.529 4.96214 18.4732C4.03336 18.4174 3.16479 17.9949 2.5475 17.2987C1.93021 16.6026 1.61476 15.6897 1.67056 14.7609C1.72635 13.8321 2.14881 12.9635 2.845 12.3462C2.92768 12.2652 2.99345 12.1686 3.03851 12.0619C3.08357 11.9553 3.10702 11.8408 3.1075 11.725V4.8125C3.1075 4.23234 3.33797 3.67594 3.74821 3.2657C4.15844 2.85547 4.71484 2.625 5.295 2.625C5.87516 2.625 6.43156 2.85547 6.8418 3.2657C7.25203 3.67594 7.4825 4.23234 7.4825 4.8125V11.76C7.48298 11.8758 7.50643 11.9903 7.55149 12.0969C7.59655 12.2036 7.66232 12.3002 7.745 12.3812C8.10266 12.7268 8.38258 13.1445 8.56612 13.6067C8.74966 14.0689 8.8326 14.5649 8.80942 15.0616C8.78624 15.5584 8.65747 16.0445 8.43168 16.4876C8.2059 16.9307 7.88828 17.3205 7.5 17.6313V17.5963ZM6.1875 13.37V4.8125C6.1875 4.58044 6.09531 4.35788 5.93122 4.19378C5.76713 4.02969 5.54457 3.9375 5.3125 3.9375C5.08044 3.9375 4.85788 4.02969 4.69378 4.19378C4.52969 4.35788 4.4375 4.58044 4.4375 4.8125V13.37C4.17301 13.5227 3.95308 13.742 3.79958 14.006C3.64608 14.27 3.56434 14.5696 3.5625 14.875C3.5625 15.3391 3.74688 15.7842 4.07507 16.1124C4.40325 16.4406 4.84837 16.625 5.3125 16.625C5.77663 16.625 6.22175 16.4406 6.54994 16.1124C6.87813 15.7842 7.0625 15.3391 7.0625 14.875C7.06066 14.5696 6.97892 14.27 6.82542 14.006C6.67192 13.742 6.45199 13.5227 6.1875 13.37ZM14.0625 2.1875H11.4375C11.2054 2.1875 10.9829 2.27969 10.8188 2.44378C10.6547 2.60788 10.5625 2.83044 10.5625 3.0625C10.5625 3.29456 10.6547 3.51712 10.8188 3.68122C10.9829 3.84531 11.2054 3.9375 11.4375 3.9375H14.0625C14.2946 3.9375 14.5171 3.84531 14.6812 3.68122C14.8453 3.51712 14.9375 3.29456 14.9375 3.0625C14.9375 2.83044 14.8453 2.60788 14.6812 2.44378C14.5171 2.27969 14.2946 2.1875 14.0625 2.1875Z\" />\r\n                    </svg>\r\n                    <span>Mín:</span> {weather.main.temp_min}°C\r\n                </p>\r\n                <p>\r\n                    <svg width=\"13\" height=\"18\" viewBox=\"0 0 13 18\" fill=\"none\">\r\n                        <path d=\"M11.4061 8.18291L7.05584 1.25553C6.99273 1.16694 6.90935 1.09473 6.81266 1.0449C6.71597 0.995065 6.60877 0.969067 6.5 0.969067C6.39123 0.969067 6.28403 0.995065 6.18734 1.0449C6.09065 1.09473 6.00727 1.16694 5.94416 1.25553L1.57419 8.21572C0.967081 9.19502 0.628903 10.3171 0.59375 11.4688C0.59375 13.0352 1.21601 14.5375 2.32365 15.6451C3.43129 16.7527 4.93357 17.375 6.5 17.375C8.06643 17.375 9.56871 16.7527 10.6763 15.6451C11.784 14.5375 12.4062 13.0352 12.4062 11.4688C12.3685 10.3044 12.0235 9.1708 11.4061 8.18291ZM6.5 16.0625C5.28214 16.0609 4.11461 15.5765 3.25345 14.7153C2.3923 13.8541 1.90781 12.6866 1.90625 11.4688C1.94113 10.551 2.21679 9.65866 2.70556 8.88116L3.31916 7.90334L9.93022 14.5144C9.50084 15.0009 8.97297 15.3905 8.3816 15.6575C7.79023 15.9245 7.14886 16.0628 6.5 16.0632V16.0625Z\" />\r\n                    </svg>\r\n                    <span>Hum:</span>\r\n                    {weather.main.humidity}%\r\n                </p>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Weather;\r\n","import React from \"react\";\r\nimport map from \"../icons/map.svg\";\r\n\r\nexport default function Message() {\r\n    return (\r\n        <div className=\"warning\">\r\n            <img src={map} alt=\"\" />\r\n            <p>\r\n                Permite el acceso a tu ubicación para poder brindarte el clima\r\n                en dónde te encuentres.\r\n            </p>\r\n            <p>También puedes escribir una ciudad en la barra de búsqueda.</p>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\nimport Nav from \"./components/Nav\";\nimport Weather from \"./components/Weather\";\nimport Message from \"./components/Message\";\n\nimport Swal from \"sweetalert2\";\n\nfunction App() {\n    useEffect(() => getWeatherByLocation(), []);\n\n    const [weather, setWeather] = useState(null);\n\n    const API_URL = \"https://api.openweathermap.org/data/2.5/weather?\";\n    const API_KEY = \"&appid=58803902b889fe680642057ad9747306\";\n    const API_CONFIG = \"&units=metric&lang=es\";\n\n    const getWeatherByLocation = () => {\n        const getErr = err => {\n            Swal.fire({\n                text: \"Hubo un error al obtener la ubicación\",\n                icon: \"warning\",\n                toast: true,\n                position: \"bottom-left\",\n                timer: 4000,\n                showConfirmButton: false,\n            });\n        };\n        const getPos = async pos => {\n            let lat = pos.coords.latitude;\n            let lon = pos.coords.longitude;\n            let url = `${API_URL}${API_KEY}&lat=${lat}&lon=${lon}${API_CONFIG}`;\n            let response = await fetch(url);\n            let data = await response.json();\n            setWeather(data);\n        };\n\n        navigator.geolocation.getCurrentPosition(getPos, getErr);\n    };\n\n    const search = async city => {\n        let url = `${API_URL}${API_KEY}&q=${city}${API_CONFIG}`;\n        let response = await fetch(url);\n        if (response.status !== 200) {\n            Swal.fire({\n                text:\n                    \"La ciudad no fue encontrada. Por favor intenta de nuevo con otra distinta\",\n                icon: \"warning\",\n                toast: true,\n                position: \"bottom-left\",\n                timer: 4000,\n                showConfirmButton: false,\n            });\n        } else {\n            let data = await response.json();\n            setWeather(data);\n        }\n    };\n\n    return (\n        <div className=\"app\">\n            <Nav search={search} />\n            {weather ? <Weather weather={weather} /> : <Message />}\n        </div>\n    );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\n\nconsole.log(\"GitHub Repo: https://github.com/IsaRodz/react-weather-app\");\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n","module.exports = __webpack_public_path__ + \"static/media/map.5529cd96.svg\";"],"sourceRoot":""}